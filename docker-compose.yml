---
version: "3"
x-logging-json: &my-logging
  logging:
    driver: json-file
    options:
      max-size: "10M"
      max-file: "5"

services:
  redis:
    container_name: redis
    # image: "redis:${REDIS_VERSION-alpine:-alpine}"
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - 6379:6379
    env_file:
    - .env
    environment:
    - REDIS_LOG_LEVEL=${REDIS_LOG_LEVEL:-warning}
    healthcheck:
      # redli -a foobared ping
      test:  [ "CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
    - ./fixtures/redis/redis.conf.tmpl:/etc/redis/redis.conf.tmpl:ro
    - redis:/data
    entrypoint: ""
    user : root
    command:
    - /bin/sh
    - -ce
    - |
      apk add --no-cache gettext bat jq bash grep sed ;
      if [ -z "$${REDIS_PASSWORD+x}" ] || [ -z "$${REDIS_PASSWORD}" ]; then
        echo "REDIS_PASSWORD is not set" ;
        exit 1 ;
      fi
      if [ ! -r "/etc/redis/redis.conf.tmpl" ]; then
        echo "redis config template file (/etc/redis/redis.conf.tmpl) was not found" ;
        exit 1 ;
      fi
      mkdir -p /usr/local/etc/redis
      if [ ! -r "/usr/local/etc/redis/redis_replica.conf" ]; then
        touch "/usr/local/etc/redis/redis_replica.conf" ;
        chown redis:redis -R "/usr/local/etc/redis/" ;
      fi
      cat "/etc/redis/redis.conf.tmpl" | envsubst | sed -r -e '/^\s*#/d' -e '/^\s*$/d'  > "/etc/redis/redis.conf"
      if [ ! -r "/etc/redis/redis.conf.tmpl" ]; then
        echo "redis config file (/etc/redis/redis.conf) was not found" ;
        exit 1 ;
      fi
      chown "redis:redis" "/etc/redis/redis.conf" ;
      su-exec redis docker-entrypoint.sh redis-server /etc/redis/redis.conf &
      while sleep 10000; do :; done
  podinfo:
    container_name: podinfo
    image: "fjolsvin/podinfo:latest"
    restart: unless-stopped
    ports:
      - 2048:2048
    depends_on :
      - redis
    links :
      - redis:redis
    environment:
      PODINFO_REDIS_ADDR: "redis:6379"
    env_file:
    - .env
    entrypoint: ""
    command:
    - /bin/sh
    - -ce
    - |
      export PODINFO_REDIS_PASSWORD="$${REDIS_PASSWORD}" ;
      export PODINFO_API_ADDR="0.0.0.0:$${PODINFO_SERVER_PORT}" ;
      /entrypoint server &
      while sleep 10000; do :; done

#   k3s-server:
#     <<: *my-logging
#     image: "rancher/k3s:${K3S_IMAGE_TAG:-latest}"
#     entrypoint: ""
#     command:
#     - /bin/sh
#     - -ce
#     - |
#         /bin/k3s server --bind-address k3s-server --node-name control-plane &
#         while sleep 10000; do :; done
#     tmpfs:
#     - /run
#     - /var/run
#     ulimits:
#       nproc: 65535
#       nofile:
#         soft: 65535
#         hard: 65535
#     privileged: true
#     restart: always
#     env_file:
#       - .env
#     environment:
#     - K3S_TOKEN=${K3S_TOKEN:?err}
#     - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
#     - K3S_KUBECONFIG_MODE=666
#     volumes:
#     - k3s-server:/var/lib/rancher/k3s
#     # This is just so that we get the kubeconfig file out
#     - .:/output
#     # This is just so that we get the kubeconfig file out
#   k3s-agent:
#     image: "rancher/k3s:${K3S_VERSION:-latest}"
#     tmpfs:
#     - /run
#     - /var/run
#     ulimits:
#       nproc: 65535
#       nofile:
#         soft: 65535
#         hard: 65535
#     privileged: true
#     restart: always
#     env_file:
#     - .env
#     environment:
#     - K3S_TOKEN=${K3S_TOKEN:?err}
#     - K3S_URL=https://k3s-server:6443
#     entrypoint: ""
#     command:
#     - /bin/sh
#     - -ce
#     - |
#         /bin/k3s &
#         while sleep 10000; do :; done

volumes:
  redis: {}
  # k3s-server: {}
